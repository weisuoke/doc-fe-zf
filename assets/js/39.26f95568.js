(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{358:function(t,n,e){"use strict";e.r(n);var s=e(33),r=Object(s.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_02-fiber"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_02-fiber"}},[t._v("#")]),t._v(" 02. Fiber")]),t._v(" "),e("h2",{attrs:{id:"_1-实现虚拟dom"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-实现虚拟dom"}},[t._v("#")]),t._v(" 1.实现虚拟DOM")]),t._v(" "),e("h3",{attrs:{id:"_1-1-src-index-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-src-index-js"}},[t._v("#")]),t._v(" 1.1 src\\index.js")]),t._v(" "),e("div",{staticClass:"language-jsx extra-class"},[e("pre",{pre:!0,attrs:{class:"language-jsx"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" React "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./react'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//import ReactDOM from 'react-dom';")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" element "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("A1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n    ")]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("B1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n      ")]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("C1"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n      ")]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("C2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n    ")]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n    ")]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),e("span",{pre:!0,attrs:{class:"token attr-value"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("B2"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n  ")]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ReactDOM.render(\n  element,\n  document.getElementById('root')\n);\n*/")]),t._v("\n")])])]),e("h3",{attrs:{id:"_1-2-src-react-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-src-react-js"}},[t._v("#")]),t._v(" 1.2 src\\react.js")]),t._v(" "),e("p",[t._v("src\\react.js")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ELEMENT_TEXT")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./constants'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("type"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" config"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("children")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" config"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__self"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" config"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__source"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        type"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        props"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("config"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            children"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" children"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("child")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" child "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n                    child "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n                    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ELEMENT_TEXT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" props"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" text"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" child"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" children"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" React "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    createElement\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" React"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"_2-实现初次渲染"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现初次渲染"}},[t._v("#")]),t._v(" 2.实现初次渲染")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/ipic/2020-04-27-144944.png",alt:"collecting2"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/ipic/2020-04-27-144954.png",alt:"fibereffectlistabc"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/ipic/2020-04-27-144958.png",alt:"fibereffectlistwithchild3"}})]),t._v(" "),e("h3",{attrs:{id:"_2-1-index-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-index-js"}},[t._v("#")]),t._v(" 2.1 index.js")]),t._v(" "),e("div",{staticClass:"language-diff extra-class"},[e("pre",{pre:!0,attrs:{class:"language-diff"}},[e("code",[t._v("import React from './react';\nimport ReactDOM from './react-dom';\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v('+let style = { border: \'3px solid red\', margin: \'5px\' };\n+let element = (\n+  <div  id="A1" style={style}>\n+    A1\n+    <div  id="B1" style={style}>\n+      B1\n+        <div  id="C1" style={style}>C1</div>\n+      <div  id="C2" style={style}>C2</div>\n+    </div>\n+    <div  id="B2" style={style}>B2</div>\n+  </div>\n+)\n')]),t._v("ReactDOM.render(\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("  element,\n  document.getElementById('root')\n")]),t._v(");\n")])])]),e("h3",{attrs:{id:"_2-2-constants-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-constants-js"}},[t._v("#")]),t._v(" 2.2 constants.js")]),t._v(" "),e("p",[t._v("src\\constants.js")]),t._v(" "),e("div",{staticClass:"language-diff extra-class"},[e("pre",{pre:!0,attrs:{class:"language-diff"}},[e("code",[e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+export const ELEMENT_TEXT = Symbol.for('ELEMENT_TEXT');\n+export const TAG_ROOT = Symbol.for('TAG_ROOT');\n+export const TAG_HOST = Symbol.for('TAG_HOST');\n+export const TAG_TEXT = Symbol.for('TAG_TEXT');\n+export const PLACEMENT = Symbol.for('PLACEMENT');\n")])])])]),e("h3",{attrs:{id:"_2-3-utils-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-utils-js"}},[t._v("#")]),t._v(" 2.3 utils.js")]),t._v(" "),e("p",[t._v("src\\utils.js")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setProp")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("dom"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^on/")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        dom"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLowerCase")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'style'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" styleName "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasOwnProperty")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("styleName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    dom"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("styleName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("styleName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        dom"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setAttribute")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" dom"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setProps")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("elem"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldProps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newProps")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" key "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" oldProps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'children'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newProps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasOwnProperty")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setProp")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elem"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newProps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                elem"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeAttribute")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" key "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" newProps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'children'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setProp")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elem"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newProps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"_2-4-react-dom-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-react-dom-js"}},[t._v("#")]),t._v(" 2.4 react-dom.js")]),t._v(" "),e("p",[t._v("src\\react-dom.js")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TAG_ROOT")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./constants'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" scheduleRoot "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./scheduler'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("element"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" container")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" rootFiber "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        tag"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TAG_ROOT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这是根Fiber")]),t._v("\n        stateNode"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" container"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//此Fiber对应的DOM节点")]),t._v("\n        props"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" children"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("element"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//子元素就是要渲染的element")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("scheduleRoot")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rootFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    render\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"_2-4-scheduler-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-scheduler-js"}},[t._v("#")]),t._v(" 2.4 scheduler.js")]),t._v(" "),e("p",[t._v("src\\scheduler.js")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" setProps "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./utils'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ELEMENT_TEXT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TAG_ROOT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TAG_HOST")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TAG_TEXT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PLACEMENT")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./constants'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" workInProgressRoot "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//正在渲染中的根Fiber")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" nextUnitOfWork "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//下一个工作单元")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("scheduleRoot")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("rootFiber")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//把当前树设置为nextUnitOfWork开始进行调度")]),t._v("\n    workInProgressRoot "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rootFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    nextUnitOfWork "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workInProgressRoot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitRoot")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" currentFiber "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" workInProgressRoot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstEffect"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitWork")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        currentFiber "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextEffect"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    workInProgressRoot "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitWork")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("currentFiber")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" returnFiber "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//先获取父Fiber")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" domReturn "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" returnFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stateNode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取父的DOM节点")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("effectTag "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PLACEMENT")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stateNode "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果是新增DOM节点")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" nextFiber "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        domReturn"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stateNode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("effectTag "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("performUnitOfWork")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("currentFiber")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("beginWork")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//开始渲染前的Fiber,就是把子元素变成子fiber")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果子节点就返回第一个子节点")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果没有子节点说明当前节点已经完成了渲染工作")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("completeUnitOfWork")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//可以结束此fiber的渲染了 ")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果它有弟弟就返回弟弟")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        currentFiber "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果没有弟弟让爸爸完成，然后找叔叔")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("beginWork")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("currentFiber")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TAG_ROOT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果是根节点")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateHostRoot")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TAG_TEXT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果是原生文本节点")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateHostText")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TAG_HOST")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果是原生DOM节点")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateHostComponent")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateHostRoot")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("currentFiber")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果是根节点")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" newChildren "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//直接渲染子节点")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("reconcileChildren")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newChildren"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateHostText")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("currentFiber")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stateNode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stateNode "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createDOM")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//先创建真实的DOM节点")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateHostComponent")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("currentFiber")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果是原生DOM节点")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stateNode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stateNode "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createDOM")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//先创建真实的DOM节点")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" newChildren "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("reconcileChildren")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newChildren"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createDOM")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("currentFiber")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ELEMENT_TEXT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createTextNode")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" stateNode "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateDOM")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stateNode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" stateNode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("reconcileChildren")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newChildren")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newChildIndex "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//新虚拟DOM数组中的索引")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" prevSibling"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newChildIndex "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" newChildren"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" newChild "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newChildren"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("newChildIndex"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" tag"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newChild "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" newChild"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("ELEMENT_TEXT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            tag "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TAG_TEXT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//文本")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newChild "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" newChild"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'string'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            tag "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TAG_HOST")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//原生DOM组件")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" newFiber "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            tag"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//原生DOM组件")]),t._v("\n            type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" newChild"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//具体的元素类型")]),t._v("\n            props"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" newChild"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//新的属性对象")]),t._v("\n            stateNode"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//stateNode肯定是空的")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//父Fiber")]),t._v("\n            effectTag"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PLACEMENT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//副作用标识")]),t._v("\n            nextEffect"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newChildIndex "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//第一个子节点挂到父节点的child属性上")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                prevSibling"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            prevSibling "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//然后newFiber变成了上一个哥哥了")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        prevSibling "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" newFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//然后newFiber变成了上一个哥哥了")]),t._v("\n        newChildIndex"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateDOM")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("stateNode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldProps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newProps")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("setProps")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stateNode"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" oldProps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newProps"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("completeUnitOfWork")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("currentFiber")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" returnFiber "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("returnFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("returnFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstEffect"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            returnFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstEffect "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstEffect"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("returnFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                returnFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextEffect "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstEffect"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            returnFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" effectTag "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("effectTag"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("effectTag"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("returnFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                returnFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextEffect "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                returnFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstEffect "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            returnFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentFiber"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("workLoop")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("deadline")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" shouldYield "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextUnitOfWork "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("shouldYield"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        nextUnitOfWork "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("performUnitOfWork")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nextUnitOfWork"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//执行一个任务并返回下一个任务")]),t._v("\n        shouldYield "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" deadline"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("timeRemaining")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果剩余时间小于1毫秒就说明没有时间了，需要把控制权让给浏览器")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果没有下一个执行单元了，并且当前渲染树存在，则进行提交阶段")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("nextUnitOfWork "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" workInProgressRoot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("commitRoot")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("requestIdleCallback")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workLoop"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//开始在空闲时间执行workLoop")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("requestIdleCallback")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workLoop"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h2",{attrs:{id:"_3-实现元素的更新"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-实现元素的更新"}},[t._v("#")]),t._v(" 3.实现元素的更新")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/ipic/2020-04-27-145004.png",alt:"updatecomponent"}})]),t._v(" "),e("h3",{attrs:{id:"_3-1-src-index-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-src-index-js"}},[t._v("#")]),t._v(" 3.1 src\\index.js")]),t._v(" "),e("p",[t._v("src\\index.js")]),t._v(" "),e("div",{staticClass:"language-diff extra-class"},[e("pre",{pre:!0,attrs:{class:"language-diff"}},[e("code",[t._v("import React from './react';\nimport ReactDOM from './react-dom';\nlet style = { border: '3px solid red', margin: '5px' };\nlet element = (\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v('  <div id="A1" style={style}>\n    A1\n    <div id="B1" style={style}>\n      B1\n      <div id="C1" style={style}>C1</div>\n      <div id="C2" style={style}>C2</div>\n    </div>\n    <div id="B2" style={style}>B2</div>\n  </div>\n')]),t._v(")\nReactDOM.render(\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("  element,\n  document.getElementById('root')\n")]),t._v(");\n\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v('+let reRender = document.getElementById(\'reRender\');\n+reRender.addEventListener(\'click\', () => {\n+  let element2 = (\n+    <div id="A1-new" style={style}>\n+      A1-new\n+      <div id="B1-new" style={style}>\n+        B1-new\n+          <div id="C1-new" style={style}>C1-new</div>\n+        <div id="C2-new" style={style}>C2-new</div>\n+      </div>\n+      <div id="B2" style={style}>B2</div>\n+      <div id="B3" style={style}>B3</div>\n+    </div>\n+  )\n+  ReactDOM.render(\n+    element2,\n+    document.getElementById(\'root\')\n+  );\n+});\n')])])])]),e("h3",{attrs:{id:"_3-2-src-constants-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-src-constants-js"}},[t._v("#")]),t._v(" 3.2 src\\constants.js")]),t._v(" "),e("div",{staticClass:"language-diff extra-class"},[e("pre",{pre:!0,attrs:{class:"language-diff"}},[e("code",[t._v("export const ELEMENT_TEXT = Symbol.for('ELEMENT_TEXT');\n\nexport const TAG_ROOT = Symbol.for('TAG_ROOT');\nexport const TAG_HOST = Symbol.for('TAG_HOST');\nexport const TAG_TEXT = Symbol.for('TAG_TEXT');\n\nexport const PLACEMENT = Symbol.for('PLACEMENT');\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+export const UPDATE = Symbol.for('UPDATE');\n+export const DELETION = Symbol.for('DELETION');\n")])])])]),e("h3",{attrs:{id:"_3-3-scheduler-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-scheduler-js"}},[t._v("#")]),t._v(" 3.3 scheduler.js")]),t._v(" "),e("p",[t._v("src\\scheduler.js")]),t._v(" "),e("div",{staticClass:"language-diff extra-class"},[e("pre",{pre:!0,attrs:{class:"language-diff"}},[e("code",[t._v("import { setProps } from './utils';\nimport {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    ELEMENT_TEXT, TAG_ROOT, TAG_HOST, TAG_TEXT, PLACEMENT, DELETION, UPDATE\n")]),t._v("} from './constants';\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+let currentRoot = null;//当前的根Fiber\n")]),t._v("let workInProgressRoot = null;//正在渲染中的根Fiber\nlet nextUnitOfWork = null//下一个工作单元\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+let deletions = [];//要删除的fiber节点\n")]),t._v("\nexport function scheduleRoot(rootFiber) {\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+    rootFiber.alternate = currentRoot;\n")]),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    //把当前树设置为nextUnitOfWork开始进行调度\n    workInProgressRoot = rootFiber;\n    nextUnitOfWork = workInProgressRoot;\n")]),t._v("}\n\nfunction commitRoot() {\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+    deletions.forEach(commitWork);\n")]),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    let currentFiber = workInProgressRoot.firstEffect;\n    while (currentFiber) {\n        commitWork(currentFiber);\n        currentFiber = currentFiber.nextEffect;\n    }\n")]),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+    deletions.length = 0;//先把要删除的节点清空掉\n+    currentRoot = workInProgressRoot;\n")]),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    workInProgressRoot = null;\n")]),t._v("}\nfunction commitWork(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (!currentFiber) {\n        return;\n    }\n    let returnFiber = currentFiber.return;//先获取父Fiber\n    const domReturn = returnFiber.stateNode;//获取父的DOM节点\n    if (currentFiber.effectTag === PLACEMENT && currentFiber.stateNode != null) {//如果是新增DOM节点\n        let nextFiber = currentFiber;\n        domReturn.appendChild(nextFiber.stateNode);\n")]),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+    } else if (currentFiber.effectTag === DELETION) {//如果是删除则删除并返回\n+        domReturn.removeChild(currentFiber.stateNode);\n+    } else if (currentFiber.effectTag === UPDATE && currentFiber.stateNode != null) {//如果是更新\n+        if (currentFiber.type === ELEMENT_TEXT) {\n+            if (currentFiber.alternate.props.text != currentFiber.props.text) {\n+                currentFiber.stateNode.textContent = currentFiber.props.text;\n+            }\n+        } else {\n+            updateDOM(currentFiber.stateNode, currentFiber.alternate.props, currentFiber.props);\n+        }\n+    }\n")]),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    currentFiber.effectTag = null;\n")]),t._v("}\n\nfunction performUnitOfWork(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    beginWork(currentFiber);//开始渲染前的Fiber,就是把子元素变成子fiber\n")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (currentFiber.child) {//如果子节点就返回第一个子节点\n        return currentFiber.child;\n    }\n")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    while (currentFiber) {//如果没有子节点说明当前节点已经完成了渲染工作\n        completeUnitOfWork(currentFiber);//可以结束此fiber的渲染了 \n        if (currentFiber.sibling) {//如果它有弟弟就返回弟弟\n            return currentFiber.sibling;\n        }\n        currentFiber = currentFiber.return;//如果没有弟弟让爸爸完成，然后找叔叔\n    }\n")]),t._v("}\n\nfunction beginWork(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (currentFiber.tag === TAG_ROOT) {//如果是根节点\n        updateHostRoot(currentFiber);\n    } else if (currentFiber.tag === TAG_TEXT) {//如果是原生文本节点\n        updateHostText(currentFiber);\n    } else if (currentFiber.tag === TAG_HOST) {//如果是原生DOM节点\n        updateHostComponent(currentFiber);\n    }\n")]),t._v("}\nfunction updateHostRoot(currentFiber) {//如果是根节点\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    const newChildren = currentFiber.props.children;//直接渲染子节点\n    reconcileChildren(currentFiber, newChildren);\n")]),t._v("}\nfunction updateHostText(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (!currentFiber.stateNode) {\n        currentFiber.stateNode = createDOM(currentFiber);//先创建真实的DOM节点\n    }\n")]),t._v("}\nfunction updateHostComponent(currentFiber) {//如果是原生DOM节点\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (!currentFiber.stateNode) {\n        currentFiber.stateNode = createDOM(currentFiber);//先创建真实的DOM节点\n    }\n    const newChildren = currentFiber.props.children;\n    reconcileChildren(currentFiber, newChildren);\n")]),t._v("}\nfunction createDOM(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (currentFiber.type === ELEMENT_TEXT) {\n        return document.createTextNode(currentFiber.props.text);\n    }\n    const stateNode = document.createElement(currentFiber.type);\n    updateDOM(stateNode, {}, currentFiber.props);\n    return stateNode;\n")]),t._v("}\n\nfunction reconcileChildren(currentFiber, newChildren) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    let newChildIndex = 0;//新虚拟DOM数组中的索引\n")]),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+    let oldFiber = currentFiber.alternate && currentFiber.alternate.child;//父Fiber中的第一个子Fiber\n+    let prevSibling;\n+    while (newChildIndex < newChildren.length || oldFiber) {\n+        const newChild = newChildren[newChildIndex];\n+        let newFiber;\n+        const sameType = oldFiber && newChild && newChild.type === oldFiber.type;//新旧都有，并且元素类型一样\n+        let tag;\n+        if (newChild && newChild.type === ELEMENT_TEXT) {\n+            tag = TAG_TEXT;//文本\n+        } else if (newChild && typeof newChild.type === 'string') {\n+            tag = TAG_HOST;//原生DOM组件\n+        }\n+        if (sameType) {\n+            if (oldFiber.alternate) {\n+                newFiber = oldFiber.alternate;\n+                newFiber.props = newChild.props;\n+                newFiber.alternate = oldFiber;\n+                newFiber.effectTag = UPDATE;\n+                newFiber.nextEffect = null;\n+            } else {\n+                newFiber = {\n+                    tag,//标记Fiber类型，例如是函数组件或者原生组件\n+                    type: oldFiber.type,//具体的元素类型\n+                    props: newChild.props,//新的属性对象\n+                    stateNode: oldFiber.stateNode,//原生组件的话就存放DOM节点，类组件的话是类组件实例，函数组件的话为空，因为没有实例\n+                    return: currentFiber,//父Fiber\n+                    alternate: oldFiber,//上一个Fiber 指向旧树中的节点\n+                    effectTag: UPDATE,//副作用标识\n+                    nextEffect: null //React 同样使用链表来将所有有副作用的Fiber连接起来\n+                }\n+            }\n+        } else {\n+            if (newChild) {//类型不一样，创建新的Fiber,旧的不复用了\n+                newFiber = {\n+                    tag,//原生DOM组件\n+                    type: newChild.type,//具体的元素类型\n+                    props: newChild.props,//新的属性对象\n+                    stateNode: null,//stateNode肯定是空的\n+                    return: currentFiber,//父Fiber\n+                    effectTag: PLACEMENT//副作用标识\n+                }\n+            }\n+            if (oldFiber) {\n+                oldFiber.effectTag = DELETION;\n+                deletions.push(oldFiber);\n+            }\n+        }\n+        if (oldFiber) {  //比较完一个元素了，老Fiber向后移动1位\n+            oldFiber = oldFiber.sibling;\n+        }\n")]),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("       if (newFiber) {\n            if (newChildIndex === 0) {\n                currentFiber.child = newFiber;//第一个子节点挂到父节点的child属性上\n            } else {\n                prevSibling.sibling = newFiber;\n            }\n            prevSibling = newFiber;//然后newFiber变成了上一个哥哥了\n        }\n        prevSibling = newFiber;//然后newFiber变成了上一个哥哥了\n        newChildIndex++;\n    }\n")]),t._v("}\n\nfunction updateDOM(stateNode, oldProps, newProps) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    setProps(stateNode, oldProps, newProps);\n")]),t._v("}\nfunction completeUnitOfWork(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    const returnFiber = currentFiber.return;\n    if (returnFiber) {\n        if (!returnFiber.firstEffect) {\n            returnFiber.firstEffect = currentFiber.firstEffect;\n        }\n        if (!!currentFiber.lastEffect) {\n            if (!!returnFiber.lastEffect) {\n                returnFiber.lastEffect.nextEffect = currentFiber.firstEffect;\n            }\n            returnFiber.lastEffect = currentFiber.lastEffect;\n        }\n")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("        const effectTag = currentFiber.effectTag;\n        if (effectTag) {\n            if (!!returnFiber.lastEffect) {\n                returnFiber.lastEffect.nextEffect = currentFiber;\n            } else {\n                returnFiber.firstEffect = currentFiber;\n            }\n            returnFiber.lastEffect = currentFiber;\n        }\n    }\n")]),t._v("}\n\nfunction workLoop(deadline) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    let shouldYield = false;\n    while (nextUnitOfWork && !shouldYield) {\n        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);//执行一个任务并返回下一个任务\n        shouldYield = deadline.timeRemaining() < 1;//如果剩余时间小于1毫秒就说明没有时间了，需要把控制权让给浏览器\n    }\n    //如果没有下一个执行单元了，并且当前渲染树存在，则进行提交阶段\n    if (!nextUnitOfWork && workInProgressRoot) {\n        commitRoot();\n    }\n    requestIdleCallback(workLoop);\n")]),t._v("}\n//开始在空闲时间执行workLoop\nrequestIdleCallback(workLoop);\n")])])]),e("h2",{attrs:{id:"_4-实现类组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-实现类组件"}},[t._v("#")]),t._v(" 4.实现类组件")]),t._v(" "),e("p",[e("img",{attrs:{src:"http://img.zhufengpeixun.cn/singlelink2.jpg",alt:"singlelink2"}})]),t._v(" "),e("p",[e("img",{attrs:{src:"https://wsk-mweb.oss-cn-hangzhou.aliyuncs.com/ipic/2020-04-27-145011.png",alt:"fiberdoublebuffer"}})]),t._v(" "),e("h3",{attrs:{id:"_4-1-src-index-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-src-index-js"}},[t._v("#")]),t._v(" 4.1 src\\index.js")]),t._v(" "),e("div",{staticClass:"language-diff extra-class"},[e("pre",{pre:!0,attrs:{class:"language-diff"}},[e("code",[t._v("import React from './react';\nimport ReactDOM from './react-dom';\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v('+class ClassCounter extends React.Component {\n+  constructor(props) {\n+    super(props);\n+    this.state = { number: 0 };\n+  }\n+  onClick = () => {\n+    this.setState(state => ({ number: state.number + 1 }));\n+  }\n+  render() {\n+    return (\n+      <div id="counter">\n+        <span>{this.state.number}</span>\n+        <button onClick={this.onClick}>加1</button>\n+      </div >\n+    )\n+  }\n+}\n')]),t._v("ReactDOM.render(\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+  <ClassCounter />,\n")]),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("  document.getElementById('root')\n")]),t._v(");\n")])])]),e("h3",{attrs:{id:"_4-2-src-react-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-src-react-js"}},[t._v("#")]),t._v(" 4.2 src\\react.js")]),t._v(" "),e("p",[t._v("src\\react.js")]),t._v(" "),e("div",{staticClass:"language-diff extra-class"},[e("pre",{pre:!0,attrs:{class:"language-diff"}},[e("code",[t._v("import { ELEMENT_TEXT } from './constants';\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+import { Update, UpdateQueue } from './updateQueue';\n+import { scheduleRoot } from './scheduler';\n")]),t._v("function createElement(type, config, ...children) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v('    delete config.__self;\n    delete config.__source;\n    return {\n        type,\n        props: {\n            ...config,\n            children: children.map(\n                child => typeof child === "object" ?\n                    child :\n                    { type: ELEMENT_TEXT, props: { text: child, children: [] } })\n        }\n    }\n')]),t._v("}\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+class Component {\n+    constructor(props) {\n+        this.props = props;\n+        this.updateQueue = new UpdateQueue();\n+    }\n+    setState(payload) {\n+        this.internalFiber.updateQueue.enqueueUpdate(new Update(payload));\n+        scheduleRoot();\n+    }\n+}\n+Component.prototype.isReactComponent = true;\n")]),t._v("let React = {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    createElement,\n")]),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+    Component\n")]),t._v("}\nexport default React;\n")])])]),e("h3",{attrs:{id:"_4-3-constants-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-constants-js"}},[t._v("#")]),t._v(" 4.3 constants.js")]),t._v(" "),e("p",[t._v("src\\constants.js")]),t._v(" "),e("div",{staticClass:"language-diff extra-class"},[e("pre",{pre:!0,attrs:{class:"language-diff"}},[e("code",[t._v("export const ELEMENT_TEXT = Symbol.for('ELEMENT_TEXT');\n\nexport const TAG_ROOT = Symbol.for('TAG_ROOT');\nexport const TAG_HOST = Symbol.for('TAG_HOST');\nexport const TAG_TEXT = Symbol.for('TAG_TEXT');\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+export const TAG_CLASS = Symbol.for('TAG_CLASS');\n")]),t._v("\nexport const UPDATE = Symbol.for('UPDATE');\nexport const PLACEMENT = Symbol.for('PLACEMENT');\nexport const DELETION = Symbol.for('DELETION');\n")])])]),e("h3",{attrs:{id:"_4-4-updatequeue-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-updatequeue-js"}},[t._v("#")]),t._v(" 4.4 updateQueue.js")]),t._v(" "),e("p",[t._v("src\\updateQueue.js")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Update")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("payload")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("payload "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" payload"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UpdateQueue")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstUpdate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastUpdate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("enqueueUpdate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("update")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastUpdate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstUpdate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastUpdate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" update"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastUpdate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextUpdate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" update"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastUpdate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" update"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("forceUpdate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" currentUpdate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstUpdate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentUpdate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            state "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" currentUpdate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("payload "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" currentUpdate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("payload")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" currentUpdate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("payload"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            currentUpdate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentUpdate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextUpdate"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstUpdate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastUpdate "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"_4-5-utils-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-utils-js"}},[t._v("#")]),t._v(" 4.5 utils.js")]),t._v(" "),e("p",[t._v("src\\utils.js")]),t._v(" "),e("div",{staticClass:"language-diff extra-class"},[e("pre",{pre:!0,attrs:{class:"language-diff"}},[e("code",[t._v("function setProp(dom, key, value) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (/^on/.test(key)) {\n        dom[key.toLowerCase()] = value;\n    } else if (key === 'style') {\n        if (value) {\n            for (let styleName in value) {\n                if (value.hasOwnProperty(styleName)) {\n                    dom.style[styleName] = value[styleName];\n                }\n            }\n        }\n    } else {\n        dom.setAttribute(key, value);\n    }\n    return dom;\n")]),t._v("}\nexport function setProps(elem, oldProps, newProps) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    for (let key in oldProps) {\n        if (key !== 'children') {\n            if (newProps.hasOwnProperty(key)) {\n                setProp(elem, key, newProps[key]);\n            } else {\n                elem.removeAttribute(key);\n            }\n        }\n    }\n    for (let key in newProps) {\n        if (key !== 'children') {\n            setProp(elem, key, newProps[key])\n        }\n    }\n")]),t._v("}\n\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+export function deepEquals(obj1, obj2) {\n+    let { children: oldChildren, ...oldProps } = obj1;\n+    let { children: newChildren, ...newProps } = obj2;\n+    return JSON.stringify(oldProps) === JSON.stringify(newProps);\n+}\n")])])])]),e("h3",{attrs:{id:"_4-6-scheduler-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-scheduler-js"}},[t._v("#")]),t._v(" 4.6 scheduler.js")]),t._v(" "),e("p",[t._v("src\\scheduler.js")]),t._v(" "),e("div",{staticClass:"language-diff extra-class"},[e("pre",{pre:!0,attrs:{class:"language-diff"}},[e("code",[t._v("import { setProps,deepEquals } from './utils';\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+import { UpdateQueue } from './updateQueue';\n+import _ from 'lodash';\n")]),t._v("import {\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+    ELEMENT_TEXT, TAG_ROOT, TAG_HOST, TAG_TEXT, TAG_CLASS, PLACEMENT, DELETION, UPDATE\n")]),t._v("} from './constants';\nlet currentRoot = null;        //当前的根Fiber\nlet workInProgressRoot = null; //正在渲染中的根Fiber\nlet nextUnitOfWork = null;     //下一个工作单元\nlet deletions = [];            //要删除的fiber节点\n\nexport function scheduleRoot(rootFiber) {\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+    if (rootFiber) {\n+        workInProgressRoot = rootFiber; //把当前树设置为nextUnitOfWork开始进行调度\n+    } else {\n+        if (currentRoot.alternate) {\n+            workInProgressRoot = currentRoot.alternate;\n+            workInProgressRoot.alternate = currentRoot;\n+        } else {\n+            workInProgressRoot = {\n+                ...currentRoot,\n+                alternate: currentRoot\n+            }\n+        }\n+    }\n+    deletions.length = 0;\n+    nextUnitOfWork = workInProgressRoot;\n")]),t._v("}\n\nfunction commitRoot() {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    deletions.forEach(commitWork);\n    let currentFiber = workInProgressRoot.firstEffect;\n    while (currentFiber) {\n        commitWork(currentFiber);\n        currentFiber = currentFiber.nextEffect;\n    }\n    deletions.length = 0;//先把要删除的节点清空掉\n")]),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+   workInProgressRoot.firstEffect = workInProgressRoot.lastEffect = null;//清除effect list\n")]),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    currentRoot = workInProgressRoot;\n    workInProgressRoot = null;\n")]),t._v("}\nfunction commitWork(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+     if (!currentFiber) {\n+        return;\n+    }\n")]),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    let returnFiber = currentFiber.return;//先获取父Fiber\n")]),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+    while (returnFiber.tag !== TAG_HOST && returnFiber.tag !== TAG_ROOT && returnFiber.tag !== TAG_TEXT) {//如果不是DOM节点就一直向上找,比如ClassCounter\n+        returnFiber = returnFiber.return;\n+    }\n")]),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    const domReturn = returnFiber.stateNode;//获取父的DOM节点\n    if (currentFiber.effectTag === PLACEMENT && currentFiber.stateNode != null) {//如果是新增DOM节点\n")]),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+        let nextFiber = currentFiber;\n+        while (nextFiber.tag !== TAG_HOST && nextFiber.tag !== TAG_TEXT) {\n+            nextFiber = nextFiber.child;//必须向下找到一个DOM节点 比如Class Counter\n+        }\n")]),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("        domReturn.appendChild(nextFiber.stateNode);\n    } else if (currentFiber.effectTag === DELETION) {//如果是删除则删除并返回\n")]),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+        commitDeletion(currentFiber, domReturn);\n")]),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    } else if (currentFiber.effectTag === UPDATE && currentFiber.stateNode != null) {//如果是更新\n        if (currentFiber.type === ELEMENT_TEXT) {\n            if (currentFiber.alternate.props.text !== currentFiber.props.text) {\n                currentFiber.stateNode.textContent = currentFiber.props.text;\n            }\n        } else {\n            updateDOM(currentFiber.stateNode, currentFiber.alternate.props, currentFiber.props);\n        }\n    }\n    currentFiber.effectTag = null;\n")]),t._v("}\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+function commitDeletion(currentFiber, domReturn) {\n+    if (currentFiber.tag === TAG_HOST || currentFiber.tag === TAG_TEXT) {\n+        domReturn.removeChild(currentFiber.stateNode);\n+    } else {\n+        commitDeletion(currentFiber.child, domReturn);\n+    }\n+}\n")]),t._v("function performUnitOfWork(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    beginWork(currentFiber);//开始渲染前的Fiber,就是把子元素变成子fiber\n")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (currentFiber.child) {//如果子节点就返回第一个子节点\n        return currentFiber.child;\n    }\n")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    while (currentFiber) {//如果没有子节点说明当前节点已经完成了渲染工作\n        completeUnitOfWork(currentFiber);//可以结束此fiber的渲染了 \n        if (currentFiber.sibling) {//如果它有弟弟就返回弟弟\n            return currentFiber.sibling;\n        }\n        currentFiber = currentFiber.return;//如果没有弟弟让爸爸完成，然后找叔叔\n    }\n")]),t._v("}\n\nfunction beginWork(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (currentFiber.tag === TAG_ROOT) {//如果是根节点\n        updateHostRoot(currentFiber);\n    } else if (currentFiber.tag === TAG_TEXT) {//如果是原生文本节点\n        updateHostText(currentFiber);\n    } else if (currentFiber.tag === TAG_HOST) {//如果是原生DOM节点\n        updateHostComponent(currentFiber);\n")]),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+    } else if (currentFiber.tag === TAG_CLASS) {//如果是类组件\n+        updateClassComponent(currentFiber)\n+    }\n")]),t._v("}\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+function updateClassComponent(currentFiber) {\n+    if (currentFiber.stateNode === null) {\n+        currentFiber.stateNode = new currentFiber.type(currentFiber.props);\n+        currentFiber.stateNode.internalFiber = currentFiber;\n+        currentFiber.updateQueue = new UpdateQueue();\n+    }\n+    currentFiber.stateNode.state = currentFiber.updateQueue.forceUpdate(currentFiber.stateNode.state);\n+    const newChildren = [currentFiber.stateNode.render()];\n+    reconcileChildren(currentFiber, newChildren);\n+}\n")]),t._v("function updateHostText(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (!currentFiber.stateNode) {\n        currentFiber.stateNode = createDOM(currentFiber);//先创建真实的DOM节点\n    }\n")]),t._v("}\nfunction updateHostRoot(currentFiber) {//如果是根节点\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    const newChildren = currentFiber.props.children;//直接渲染子节点\n    reconcileChildren(currentFiber, newChildren);\n")]),t._v("}\n\nfunction updateHostComponent(currentFiber) {//如果是原生DOM节点\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (!currentFiber.stateNode) {\n        currentFiber.stateNode = createDOM(currentFiber);//先创建真实的DOM节点\n    }\n    const newChildren = currentFiber.props.children;\n    reconcileChildren(currentFiber, newChildren);\n")]),t._v("}\nfunction createDOM(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (currentFiber.type === ELEMENT_TEXT) {\n        return document.createTextNode(currentFiber.props.text);\n    }\n    const stateNode = document.createElement(currentFiber.type);\n    updateDOM(stateNode, {}, currentFiber.props);\n    return stateNode;\n")]),t._v("}\n\nfunction reconcileChildren(currentFiber, newChildren) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    let newChildIndex = 0;//新虚拟DOM数组中的索引\n    let oldFiber = currentFiber.alternate && currentFiber.alternate.child;//父Fiber中的第一个子Fiber\n    let prevSibling;\n    while (newChildIndex < newChildren.length || oldFiber) {\n        const newChild = newChildren[newChildIndex];\n        let newFiber;\n        const sameType = oldFiber && newChild && newChild.type === oldFiber.type;//新旧都有，并且元素类型一样\n        let tag;\n")]),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+        if (newChild && typeof newChild.type === 'function' && newChild.type.prototype.isReactComponent) {\n+            tag = TAG_CLASS;//类组件\n+        } else if (newChild && newChild.type === ELEMENT_TEXT) {\n")]),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("            tag = TAG_TEXT;//文本\n        } else if (newChild && typeof newChild.type === 'string') {\n            tag = TAG_HOST;//原生DOM组件\n        }\n        if (sameType) {\n")]),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+            let { children: oldChildren, ...oldProps } = oldFiber.props;\n+            let { children: newChildren, ...newProps } = newChild.props;\n+            newFiber = {\n+                tag,//标记Fiber类型，例如是函数组件或者原生组件\n+                type: oldFiber.type,//具体的元素类型\n+                props: newChild.props,//新的属性对象\n+                stateNode: oldFiber.stateNode,//原生组件的话就存放DOM节点，类组件的话是类组件实例，函数组件的话为空，因为没有实例\n+                return: currentFiber,//父Fiber\n+                updateQueue: oldFiber.updateQueue || new UpdateQueue(),\n+                alternate: oldFiber,//上一个Fiber 指向旧树中的节点\n+                effectTag: deepEquals(oldFiber.props, newChild.props) ? null : UPDATE,//副作用标识\n+            }\n")]),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("        } else {\n            if (newChild) {//类型不一样，创建新的Fiber,旧的不复用了\n                newFiber = {\n                    tag,//原生DOM组件\n                    type: newChild.type,//具体的元素类型\n                    props: newChild.props,//新的属性对象\n                    stateNode: null,//stateNode肯定是空的\n                    return: currentFiber,//父Fiber\n                    effectTag: PLACEMENT//副作用标识\n                }\n            }\n            if (oldFiber) {\n                oldFiber.effectTag = DELETION;\n                deletions.push(oldFiber);\n            }\n        }\n        if (oldFiber) {  //比较完一个元素了，老Fiber向后移动1位\n            oldFiber = oldFiber.sibling;\n        }\n       if (newFiber) {\n            if (newChildIndex === 0) {\n                currentFiber.child = newFiber;//第一个子节点挂到父节点的child属性上\n            } else {\n                prevSibling.sibling = newFiber;\n            }\n            prevSibling = newFiber;//然后newFiber变成了上一个哥哥了\n        }\n        newChildIndex++;\n    }\n")]),t._v("}\n\nfunction updateDOM(stateNode, oldProps, newProps) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    setProps(stateNode, oldProps, newProps);\n")]),t._v("}\nfunction completeUnitOfWork(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    const returnFiber = currentFiber.return;\n    if (returnFiber) {\n        if (!returnFiber.firstEffect) {\n            returnFiber.firstEffect = currentFiber.firstEffect;\n        }\n        if (!!currentFiber.lastEffect) {\n            if (!!returnFiber.lastEffect) {\n                returnFiber.lastEffect.nextEffect = currentFiber.firstEffect;\n            }\n            returnFiber.lastEffect = currentFiber.lastEffect;\n        }\n")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("        const effectTag = currentFiber.effectTag;\n        if (effectTag) {\n            if (!!returnFiber.lastEffect) {\n                returnFiber.lastEffect.nextEffect = currentFiber;\n            } else {\n                returnFiber.firstEffect = currentFiber;\n            }\n            returnFiber.lastEffect = currentFiber;\n        }\n    }\n")]),t._v("}\n\nfunction workLoop(deadline) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    let shouldYield = false;\n    while (nextUnitOfWork && !shouldYield) {\n        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);//执行一个任务并返回下一个任务\n        shouldYield = deadline.timeRemaining() < 1;//如果剩余时间小于1毫秒就说明没有时间了，需要把控制权让给浏览器\n    }\n    //如果没有下一个执行单元了，并且当前渲染树存在，则进行提交阶段\n    if (!nextUnitOfWork && workInProgressRoot) {\n        commitRoot();\n    }\n    requestIdleCallback(workLoop);\n")]),t._v("}\n//开始在空闲时间执行workLoop\nrequestIdleCallback(workLoop);\n")])])]),e("h2",{attrs:{id:"_5-实现函数组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-实现函数组件"}},[t._v("#")]),t._v(" 5.实现函数组件")]),t._v(" "),e("h3",{attrs:{id:"_5-1-src-index-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-src-index-js"}},[t._v("#")]),t._v(" 5.1 src\\index.js")]),t._v(" "),e("p",[t._v("src\\index.js")]),t._v(" "),e("div",{staticClass:"language-diff extra-class"},[e("pre",{pre:!0,attrs:{class:"language-diff"}},[e("code",[e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+function FunctionCounter() {\n+  return (\n+    <h1>\n+      Count:0\n+    </h1>\n+  )\n+}\n")]),t._v("ReactDOM.render(\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+  <FunctionCounter />,\n")]),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("   document.getElementById('root')\n")]),t._v(");\n")])])]),e("h3",{attrs:{id:"_5-2-constants-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-constants-js"}},[t._v("#")]),t._v(" 5.2 constants.js")]),t._v(" "),e("p",[t._v("src\\constants.js")]),t._v(" "),e("div",{staticClass:"language-diff extra-class"},[e("pre",{pre:!0,attrs:{class:"language-diff"}},[e("code",[t._v("export const ELEMENT_TEXT = Symbol.for('ELEMENT_TEXT');\n\nexport const TAG_ROOT = Symbol.for('TAG_ROOT');\nexport const TAG_HOST = Symbol.for('TAG_HOST');\nexport const TAG_TEXT = Symbol.for('TAG_TEXT');\nexport const TAG_CLASS = Symbol.for('TAG_CLASS');\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+export const TAG_FUNCTION = Symbol.for('TAG_FUNCTION');\n")]),t._v("export const UPDATE = Symbol.for('UPDATE');\nexport const PLACEMENT = Symbol.for('PLACEMENT');\nexport const DELETION = Symbol.for('DELETION');\n")])])]),e("h3",{attrs:{id:"_5-3-scheduler-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-scheduler-js"}},[t._v("#")]),t._v(" 5.3 scheduler.js")]),t._v(" "),e("p",[t._v("src\\scheduler.js")]),t._v(" "),e("div",{staticClass:"language-diff extra-class"},[e("pre",{pre:!0,attrs:{class:"language-diff"}},[e("code",[t._v("import { setProps, deepEquals } from './utils';\nimport { UpdateQueue } from './updateQueue';\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+import {\n+    ELEMENT_TEXT, TAG_ROOT, TAG_HOST, TAG_TEXT, TAG_CLASS, TAG_FUNCTION, PLACEMENT, DELETION, UPDATE\n+} from './constants';\n")]),t._v("let currentRoot = null;        //当前的根Fiber\nlet workInProgressRoot = null; //正在渲染中的根Fiber\nlet nextUnitOfWork = null;     //下一个工作单元\nlet deletions = [];            //要删除的fiber节点\n\nexport function scheduleRoot(rootFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (rootFiber) {\n        workInProgressRoot = rootFiber; //把当前树设置为nextUnitOfWork开始进行调度\n    } else {\n        if (currentRoot.alternate) {\n            workInProgressRoot = currentRoot.alternate;\n            workInProgressRoot.alternate = currentRoot;\n        } else {\n            workInProgressRoot = {\n                ...currentRoot,\n                alternate: currentRoot\n            }\n        }\n    }\n    deletions.length = 0;\n    nextUnitOfWork = workInProgressRoot;\n")]),t._v("}\n\nfunction commitRoot() {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    deletions.forEach(commitWork);\n    let currentFiber = workInProgressRoot.firstEffect;\n    while (currentFiber) {\n        commitWork(currentFiber);\n        currentFiber = currentFiber.nextEffect;\n    }\n    deletions.length = 0;//先把要删除的节点清空掉\n    workInProgressRoot.firstEffect = workInProgressRoot.lastEffect = null;\n    currentRoot = workInProgressRoot;\n    workInProgressRoot = null;\n")]),t._v("}\nfunction commitWork(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (!currentFiber) {\n        return;\n    }\n    let returnFiber = currentFiber.return;//先获取父Fiber\n    while (returnFiber.tag !== TAG_HOST && returnFiber.tag !== TAG_ROOT && returnFiber.tag !== TAG_TEXT) {//如果不是DOM节点就一直向上找\n        returnFiber = returnFiber.return;\n    }\n    const domReturn = returnFiber.stateNode;//获取父的DOM节点\n    if (currentFiber.effectTag === PLACEMENT && currentFiber.stateNode != null) {//如果是新增DOM节点\n        let nextFiber = currentFiber;\n        while (nextFiber.tag !== TAG_HOST && nextFiber.tag !== TAG_TEXT) {//必须向下找到一个DOM节点\n            nextFiber = nextFiber.child;\n        }\n        domReturn.appendChild(nextFiber.stateNode);\n    } else if (currentFiber.effectTag === DELETION) {//如果是删除则删除并返回\n        commitDeletion(currentFiber, domReturn);\n    } else if (currentFiber.effectTag === UPDATE && currentFiber.stateNode != null) {//如果是更新\n        if (currentFiber.type === ELEMENT_TEXT) {\n            if (currentFiber.alternate.props.text !== currentFiber.props.text) {\n                currentFiber.stateNode.textContent = currentFiber.props.text;\n            }\n        } else {\n            updateDOM(currentFiber.stateNode, currentFiber.alternate.props, currentFiber.props);\n        }\n    }\n    currentFiber.effectTag = null;\n")]),t._v("}\nfunction commitDeletion(currentFiber, domReturn) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (currentFiber.tag === TAG_HOST || currentFiber.tag === TAG_TEXT) {\n        domReturn.removeChild(currentFiber.stateNode);\n    } else {\n        commitDeletion(currentFiber.child, domReturn);\n    }\n")]),t._v("}\nfunction performUnitOfWork(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    beginWork(currentFiber);//开始渲染前的Fiber,就是把子元素变成子fiber\n")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (currentFiber.child) {//如果子节点就返回第一个子节点\n        return currentFiber.child;\n    }\n")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    while (currentFiber) {//如果没有子节点说明当前节点已经完成了渲染工作\n        completeUnitOfWork(currentFiber);//可以结束此fiber的渲染了 \n        if (currentFiber.sibling) {//如果它有弟弟就返回弟弟\n            return currentFiber.sibling;\n        }\n        currentFiber = currentFiber.return;//如果没有弟弟让爸爸完成，然后找叔叔\n    }\n")]),t._v("}\n\nfunction beginWork(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (currentFiber.tag === TAG_ROOT) {//如果是根节点\n        updateHostRoot(currentFiber);\n    } else if (currentFiber.tag === TAG_TEXT) {//如果是原生文本节点\n        updateHostText(currentFiber);\n    } else if (currentFiber.tag === TAG_HOST) {//如果是原生DOM节点\n        updateHostComponent(currentFiber);\n    } else if (currentFiber.tag === TAG_CLASS) {//如果是类组件\n        updateClassComponent(currentFiber)\n")]),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+    } else if (currentFiber.tag === TAG_FUNCTION) {//如果是函数组件\n+        updateFunctionComponent(currentFiber);\n+    }\n")]),t._v("}\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+function updateFunctionComponent(currentFiber) {\n+    const newChildren = [currentFiber.type(currentFiber.props)];\n+    reconcileChildren(currentFiber, newChildren);\n+}\n")]),t._v("function updateClassComponent(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (currentFiber.stateNode === null) {\n        currentFiber.stateNode = new currentFiber.type(currentFiber.props);\n        currentFiber.stateNode.internalFiber = currentFiber;\n        currentFiber.updateQueue = new UpdateQueue();\n    }\n    currentFiber.stateNode.state = currentFiber.updateQueue.forceUpdate(currentFiber.stateNode.state);\n    const newChildren = [currentFiber.stateNode.render()];\n    reconcileChildren(currentFiber, newChildren);\n")]),t._v("}\nfunction updateHostText(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (!currentFiber.stateNode) {\n        currentFiber.stateNode = createDOM(currentFiber);//先创建真实的DOM节点\n    }\n")]),t._v("}\nfunction updateHostRoot(currentFiber) {//如果是根节点\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    const newChildren = currentFiber.props.children;//直接渲染子节点\n    reconcileChildren(currentFiber, newChildren);\n")]),t._v("}\n\nfunction updateHostComponent(currentFiber) {//如果是原生DOM节点\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (!currentFiber.stateNode) {\n        currentFiber.stateNode = createDOM(currentFiber);//先创建真实的DOM节点\n    }\n    const newChildren = currentFiber.props.children;\n    reconcileChildren(currentFiber, newChildren);\n")]),t._v("}\nfunction createDOM(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (currentFiber.type === ELEMENT_TEXT) {\n        return document.createTextNode(currentFiber.props.text);\n    }\n    const stateNode = document.createElement(currentFiber.type);\n    updateDOM(stateNode, {}, currentFiber.props);\n    return stateNode;\n")]),t._v("}\n\nfunction reconcileChildren(currentFiber, newChildren) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    let newChildIndex = 0;//新虚拟DOM数组中的索引\n    let oldFiber = currentFiber.alternate && currentFiber.alternate.child;//父Fiber中的第一个子Fiber\n    let prevSibling;\n    while (newChildIndex < newChildren.length || oldFiber) {\n        const newChild = newChildren[newChildIndex];\n        let newFiber;\n        const sameType = oldFiber && newChild && newChild.type === oldFiber.type;//新旧都有，并且元素类型一样\n        let tag;\n        if (newChild && typeof newChild.type === 'function' && newChild.type.prototype.isReactComponent) {\n            tag = TAG_CLASS;//类组件\n")]),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+        } else if (newChild && typeof newChild.type === 'function') {\n+            tag = TAG_FUNCTION;//函数组件\n+        } else if (newChild && newChild.type === ELEMENT_TEXT) {\n")]),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("            tag = TAG_TEXT;//文本\n        } else if (newChild && typeof newChild.type === 'string') {\n            tag = TAG_HOST;//原生DOM组件\n        }\n        if (sameType) {\n            newFiber = {\n                tag,//标记Fiber类型，例如是函数组件或者原生组件\n                type: oldFiber.type,//具体的元素类型\n                props: newChild.props,//新的属性对象\n                stateNode: oldFiber.stateNode,//原生组件的话就存放DOM节点，类组件的话是类组件实例，函数组件的话为空，因为没有实例\n                return: currentFiber,//父Fiber\n                updateQueue: oldFiber.updateQueue || new UpdateQueue(),\n                alternate: oldFiber,//上一个Fiber 指向旧树中的节点\n                effectTag: deepEquals(oldFiber.props, newChild.props) ? null : UPDATE,//副作用标识\n            }\n        } else {\n            if (newChild) {//类型不一样，创建新的Fiber,旧的不复用了\n                newFiber = {\n                    tag,//原生DOM组件\n                    type: newChild.type,//具体的元素类型\n                    props: newChild.props,//新的属性对象\n                    stateNode: null,//stateNode肯定是空的\n                    return: currentFiber,//父Fiber\n                    effectTag: PLACEMENT //副作用标识 \n                }\n            }\n            if (oldFiber) {\n                oldFiber.effectTag = DELETION;\n                deletions.push(oldFiber);\n            }\n        }\n        if (oldFiber) {  //比较完一个元素了，老Fiber向后移动1位\n            oldFiber = oldFiber.sibling;\n        }\n        if (newFiber) {\n            if (newChildIndex === 0) {\n                currentFiber.child = newFiber;//第一个子节点挂到父节点的child属性上\n            } else {\n                prevSibling.sibling = newFiber;\n            }\n            prevSibling = newFiber;//然后newFiber变成了上一个哥哥了\n        }\n        newChildIndex++;\n    }\n")]),t._v("}\n\nfunction updateDOM(stateNode, oldProps, newProps) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    setProps(stateNode, oldProps, newProps);\n")]),t._v("}\nfunction completeUnitOfWork(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    const returnFiber = currentFiber.return;\n    if (returnFiber) {\n        if (!returnFiber.firstEffect) {\n            returnFiber.firstEffect = currentFiber.firstEffect;\n        }\n        if (!!currentFiber.lastEffect) {\n            if (!!returnFiber.lastEffect) {\n                returnFiber.lastEffect.nextEffect = currentFiber.firstEffect;\n            }\n            returnFiber.lastEffect = currentFiber.lastEffect;\n        }\n")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("        const effectTag = currentFiber.effectTag;\n        if (effectTag) {\n            if (!!returnFiber.lastEffect) {\n                returnFiber.lastEffect.nextEffect = currentFiber;\n            } else {\n                returnFiber.firstEffect = currentFiber;\n            }\n            returnFiber.lastEffect = currentFiber;\n        }\n    }\n")]),t._v("}\n\nfunction workLoop(deadline) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    let shouldYield = false;\n    while (nextUnitOfWork && !shouldYield) {\n        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);//执行一个任务并返回下一个任务\n        shouldYield = deadline.timeRemaining() < 1;//如果剩余时间小于1毫秒就说明没有时间了，需要把控制权让给浏览器\n    }\n    //如果没有下一个执行单元了，并且当前渲染树存在，则进行提交阶段\n    if (!nextUnitOfWork && workInProgressRoot) {\n        commitRoot();\n    }\n    requestIdleCallback(workLoop);\n")]),t._v("}\n//开始在空闲时间执行workLoop\nrequestIdleCallback(workLoop);\n")])])]),e("h2",{attrs:{id:"_5-实现hooks"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-实现hooks"}},[t._v("#")]),t._v(" 5.实现hooks")]),t._v(" "),e("h3",{attrs:{id:"_5-1-src-index-js-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-src-index-js-2"}},[t._v("#")]),t._v(" 5.1 src\\index.js")]),t._v(" "),e("p",[t._v("src\\index.js")]),t._v(" "),e("div",{staticClass:"language-diff extra-class"},[e("pre",{pre:!0,attrs:{class:"language-diff"}},[e("code",[t._v("import React from './react';\nimport ReactDOM from './react-dom';\n\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+function reducer(state, action) {\n+  switch (action.type) {\n+    case 'ADD':\n+      return { count: state.count + 1 };\n+    default:\n+      return state;\n+  }\n+}\n+function FunctionCounter() {\n+  const [numberState, setNumberState] = React.useState({ number: 0 });\n+  const [countState, dispatch] = React.useReducer(reducer, { count: 0 });\n+  return (\n+    <div>\n+      <h1 onClick={() => setNumberState(state => ({ number: state.number + 1 }))}>\n+        Count: {numberState.number}\n+      </h1 >\n+      <hr />\n+      <h1 onClick={() => dispatch({ type: 'ADD' })}>\n+        Count: {countState.count}\n+      </h1 >\n+    </div>\n+  )\n+}\n")]),t._v("ReactDOM.render(\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("  <FunctionCounter />,\n  document.getElementById('root')\n")]),t._v(");\n")])])]),e("h3",{attrs:{id:"_5-2-src-react-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-src-react-js"}},[t._v("#")]),t._v(" 5.2 src\\react.js")]),t._v(" "),e("p",[t._v("src\\react.js")]),t._v(" "),e("div",{staticClass:"language-diff extra-class"},[e("pre",{pre:!0,attrs:{class:"language-diff"}},[e("code",[t._v("import { ELEMENT_TEXT } from './constants';\nimport { Update, UpdateQueue } from './updateQueue';\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+import { scheduleRoot,useState,useReducer} from './scheduler';\n")]),t._v("function createElement(type, config, ...children) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v('    delete config.__self;\n    delete config.__source;\n    return {\n        type,\n        props: {\n            ...config,\n            children: children.map(\n                child => typeof child === "object" ?\n                    child :\n                    { type: ELEMENT_TEXT, props: { text: child, children: [] } })\n        }\n    }\n')]),t._v("}\nclass Component {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    constructor(props) {\n        this.props = props;\n        this.updateQueue = new UpdateQueue();\n    }\n    setState(payload) {\n        this.internalFiber.updateQueue.enqueueUpdate(new Update(payload));\n        scheduleRoot();\n    }\n")]),t._v("}\nComponent.prototype.isReactComponent = true;\nlet React = {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    createElement,\n    Component,\n")]),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+    useState,\n+    useReducer\n")]),t._v("}\nexport default React;\n")])])]),e("h3",{attrs:{id:"_5-3-src-scheduler-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-src-scheduler-js"}},[t._v("#")]),t._v(" 5.3 src\\scheduler.js")]),t._v(" "),e("p",[t._v("src\\scheduler.js")]),t._v(" "),e("div",{staticClass:"language-diff extra-class"},[e("pre",{pre:!0,attrs:{class:"language-diff"}},[e("code",[t._v("import { setProps, deepEquals } from './utils';\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+import { UpdateQueue, Update } from './updateQueue';\n")]),t._v("import {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    ELEMENT_TEXT, TAG_ROOT, TAG_HOST, TAG_TEXT, TAG_CLASS, TAG_FUNCTION, PLACEMENT, DELETION, UPDATE\n")]),t._v("} from './constants';\nlet currentRoot = null;         //当前的根Fiber\nlet workInProgressRoot = null;  //正在渲染中的根Fiber\nlet nextUnitOfWork = null;      //下一个工作单元\nlet deletions = [];             //要删除的fiber节点\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+let workInProgressFiber = null; //正在工作中的fiber\n+let hookIndex = 0;              //hook索引\n")]),t._v("export function scheduleRoot(rootFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (rootFiber) {\n        workInProgressRoot = rootFiber; //把当前树设置为nextUnitOfWork开始进行调度\n    } else {\n        if (currentRoot.alternate) {\n            workInProgressRoot = currentRoot.alternate;\n            workInProgressRoot.alternate = currentRoot;\n        } else {\n            workInProgressRoot = {\n                ...currentRoot,\n                alternate: currentRoot\n            }\n        }\n    }\n    deletions.length = 0;\n    nextUnitOfWork = workInProgressRoot;\n")]),t._v("}\n\nfunction commitRoot() {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    deletions.forEach(commitWork);\n    let currentFiber = workInProgressRoot.firstEffect;\n    while (currentFiber) {\n        commitWork(currentFiber);\n        currentFiber = currentFiber.nextEffect;\n    }\n    deletions.length = 0;//先把要删除的节点清空掉\n    workInProgressRoot.firstEffect = workInProgressRoot.lastEffect = null;\n    currentRoot = workInProgressRoot;\n    workInProgressRoot = null;\n")]),t._v("}\nfunction commitWork(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (!currentFiber) {\n        return;\n    }\n    let returnFiber = currentFiber.return;//先获取父Fiber\n    while (returnFiber.tag !== TAG_HOST && returnFiber.tag !== TAG_ROOT && returnFiber.tag !== TAG_TEXT) {//如果不是DOM节点就一直向上找\n        returnFiber = returnFiber.return;\n    }\n    const domReturn = returnFiber.stateNode;//获取父的DOM节点\n    if (currentFiber.effectTag === PLACEMENT && currentFiber.stateNode != null) {//如果是新增DOM节点\n        let nextFiber = currentFiber;\n        while (nextFiber.tag !== TAG_HOST && nextFiber.tag !== TAG_TEXT) {//必须向下找到一个DOM节点\n            nextFiber = nextFiber.child;\n        }\n        domReturn.appendChild(nextFiber.stateNode);\n    } else if (currentFiber.effectTag === DELETION) {//如果是删除则删除并返回\n        commitDeletion(currentFiber, domReturn);\n    } else if (currentFiber.effectTag === UPDATE && currentFiber.stateNode != null) {//如果是更新\n        if (currentFiber.type === ELEMENT_TEXT) {\n            if (currentFiber.alternate.props.text !== currentFiber.props.text) {\n                currentFiber.stateNode.textContent = currentFiber.props.text;\n            }\n        } else {\n            updateDOM(currentFiber.stateNode, currentFiber.alternate.props, currentFiber.props);\n        }\n    }\n    currentFiber.effectTag = null;\n")]),t._v("}\nfunction commitDeletion(currentFiber, domReturn) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (currentFiber.tag === TAG_HOST || currentFiber.tag === TAG_TEXT) {\n        domReturn.removeChild(currentFiber.stateNode);\n    } else {\n        commitDeletion(currentFiber.child, domReturn);\n    }\n")]),t._v("}\nfunction performUnitOfWork(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    beginWork(currentFiber);//开始渲染前的Fiber,就是把子元素变成子fiber\n")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (currentFiber.child) {//如果子节点就返回第一个子节点\n        return currentFiber.child;\n    }\n")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    while (currentFiber) {//如果没有子节点说明当前节点已经完成了渲染工作\n        completeUnitOfWork(currentFiber);//可以结束此fiber的渲染了 \n        if (currentFiber.sibling) {//如果它有弟弟就返回弟弟\n            return currentFiber.sibling;\n        }\n        currentFiber = currentFiber.return;//如果没有弟弟让爸爸完成，然后找叔叔\n    }\n")]),t._v("}\n\nfunction beginWork(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (currentFiber.tag === TAG_ROOT) {//如果是根节点\n        updateHostRoot(currentFiber);\n    } else if (currentFiber.tag === TAG_TEXT) {//如果是原生文本节点\n        updateHostText(currentFiber);\n    } else if (currentFiber.tag === TAG_HOST) {//如果是原生DOM节点\n        updateHostComponent(currentFiber);\n    } else if (currentFiber.tag === TAG_CLASS) {//如果是类组件\n        updateClassComponent(currentFiber)\n    } else if (currentFiber.tag === TAG_FUNCTION) {//如果是函数组件\n        updateFunctionComponent(currentFiber);\n    }\n")]),t._v("}\nfunction updateFunctionComponent(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+    workInProgressFiber = currentFiber;\n+    hookIndex = 0;\n+    workInProgressFiber.hooks = [];\n")]),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    const newChildren = [currentFiber.type(currentFiber.props)];\n    reconcileChildren(currentFiber, newChildren);\n")]),t._v("}\nfunction updateClassComponent(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (currentFiber.stateNode === null) {\n        currentFiber.stateNode = new currentFiber.type(currentFiber.props);\n        currentFiber.stateNode.internalFiber = currentFiber;\n        currentFiber.updateQueue = new UpdateQueue();\n    }\n    currentFiber.stateNode.state = currentFiber.updateQueue.forceUpdate(currentFiber.stateNode.state);\n    const newChildren = [currentFiber.stateNode.render()];\n    reconcileChildren(currentFiber, newChildren);\n")]),t._v("}\nfunction updateHostText(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (!currentFiber.stateNode) {\n        currentFiber.stateNode = createDOM(currentFiber);//先创建真实的DOM节点\n    }\n")]),t._v("}\nfunction updateHostRoot(currentFiber) {//如果是根节点\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    const newChildren = currentFiber.props.children;//直接渲染子节点\n    reconcileChildren(currentFiber, newChildren);\n")]),t._v("}\n\nfunction updateHostComponent(currentFiber) {//如果是原生DOM节点\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (!currentFiber.stateNode) {\n        currentFiber.stateNode = createDOM(currentFiber);//先创建真实的DOM节点\n    }\n    const newChildren = currentFiber.props.children;\n    reconcileChildren(currentFiber, newChildren);\n")]),t._v("}\nfunction createDOM(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    if (currentFiber.type === ELEMENT_TEXT) {\n        return document.createTextNode(currentFiber.props.text);\n    }\n    const stateNode = document.createElement(currentFiber.type);\n    updateDOM(stateNode, {}, currentFiber.props);\n    return stateNode;\n")]),t._v("}\n\nfunction reconcileChildren(currentFiber, newChildren) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    let newChildIndex = 0;//新虚拟DOM数组中的索引\n    let oldFiber = currentFiber.alternate && currentFiber.alternate.child;//父Fiber中的第一个子Fiber\n    let prevSibling;\n    while (newChildIndex < newChildren.length || oldFiber) {\n        const newChild = newChildren[newChildIndex];\n        let newFiber;\n        const sameType = oldFiber && newChild && newChild.type === oldFiber.type;//新旧都有，并且元素类型一样\n        let tag;\n        if (newChild && typeof newChild.type === 'function' && newChild.type.prototype.isReactComponent) {\n            tag = TAG_CLASS;//类组件\n        } else if (newChild && typeof newChild.type === 'function') {\n            tag = TAG_FUNCTION;//函数组件\n        } else if (newChild && newChild.type === ELEMENT_TEXT) {\n            tag = TAG_TEXT;//文本\n        } else if (newChild && typeof newChild.type === 'string') {\n            tag = TAG_HOST;//原生DOM组件\n        }\n        if (sameType) {\n            newFiber = {\n                tag,//标记Fiber类型，例如是函数组件或者原生组件\n                type: oldFiber.type,//具体的元素类型\n                props: newChild.props,//新的属性对象\n                stateNode: oldFiber.stateNode,//原生组件的话就存放DOM节点，类组件的话是类组件实例，函数组件的话为空，因为没有实例\n                return: currentFiber,//父Fiber\n                updateQueue: oldFiber.updateQueue || new UpdateQueue(),\n                alternate: oldFiber,//上一个Fiber 指向旧树中的节点\n                effectTag: deepEquals(oldFiber.props, newChild.props) ? null : UPDATE,//副作用标识\n            }\n        } else {\n            if (newChild) {//类型不一样，创建新的Fiber,旧的不复用了\n                newFiber = {\n                    tag,//原生DOM组件\n                    type: newChild.type,//具体的元素类型\n                    props: newChild.props,//新的属性对象\n                    stateNode: null,//stateNode肯定是空的\n                    return: currentFiber,//父Fiber\n                    effectTag: PLACEMENT //副作用标识 \n                }\n            }\n            if (oldFiber) {\n                oldFiber.effectTag = DELETION;\n                deletions.push(oldFiber);\n            }\n        }\n        if (oldFiber) {  //比较完一个元素了，老Fiber向后移动1位\n            oldFiber = oldFiber.sibling;\n        }\n        if (newFiber) {\n            if (newChildIndex === 0) {\n                currentFiber.child = newFiber;//第一个子节点挂到父节点的child属性上\n            } else {\n                prevSibling.sibling = newFiber;\n            }\n            prevSibling = newFiber;//然后newFiber变成了上一个哥哥了\n        }\n        newChildIndex++;\n    }\n")]),t._v("}\n\nfunction updateDOM(stateNode, oldProps, newProps) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    setProps(stateNode, oldProps, newProps);\n")]),t._v("}\nfunction completeUnitOfWork(currentFiber) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    const returnFiber = currentFiber.return;\n    if (returnFiber) {\n        if (!returnFiber.firstEffect) {\n            returnFiber.firstEffect = currentFiber.firstEffect;\n        }\n        if (!!currentFiber.lastEffect) {\n            if (!!returnFiber.lastEffect) {\n                returnFiber.lastEffect.nextEffect = currentFiber.firstEffect;\n            }\n            returnFiber.lastEffect = currentFiber.lastEffect;\n        }\n")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("        const effectTag = currentFiber.effectTag;\n        if (effectTag) {\n            if (!!returnFiber.lastEffect) {\n                returnFiber.lastEffect.nextEffect = currentFiber;\n            } else {\n                returnFiber.firstEffect = currentFiber;\n            }\n            returnFiber.lastEffect = currentFiber;\n        }\n    }\n")]),t._v("}\n"),e("span",{pre:!0,attrs:{class:"token inserted-sign inserted"}},[t._v("+export function useReducer(reducer, initialValue) {\n+    let oldHook =\n+        workInProgressFiber.alternate &&\n+        workInProgressFiber.alternate.hooks &&\n+        workInProgressFiber.alternate.hooks[hookIndex];\n+    let newHook = oldHook;\n+    if (oldHook) {\n+        oldHook.state = oldHook.updateQueue.forceUpdate(oldHook.state);\n+    } else {\n+        newHook = {\n+            state: initialValue,\n+            updateQueue: new UpdateQueue()\n+        };\n+    }\n+    const dispatch = action => {\n+        newHook.updateQueue.enqueueUpdate(\n+            new Update(reducer ? reducer(newHook.state, action) : action)\n+        );\n+        scheduleRoot();\n+    }\n+    workInProgressFiber.hooks[hookIndex++] = newHook;\n+    return [newHook.state, dispatch];\n+}\n+export function useState(initState) {\n+    return useReducer(null, initState)\n+}\n")]),t._v("function workLoop(deadline) {\n"),e("span",{pre:!0,attrs:{class:"token unchanged"}},[t._v("    let shouldYield = false;\n    while (nextUnitOfWork && !shouldYield) {\n        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);//执行一个任务并返回下一个任务\n        shouldYield = deadline.timeRemaining() < 1;//如果剩余时间小于1毫秒就说明没有时间了，需要把控制权让给浏览器\n    }\n    //如果没有下一个执行单元了，并且当前渲染树存在，则进行提交阶段\n    if (!nextUnitOfWork && workInProgressRoot) {\n        commitRoot();\n    }\n    requestIdleCallback(workLoop);\n")]),t._v("}\n//开始在空闲时间执行workLoop\nrequestIdleCallback(workLoop);\n")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);